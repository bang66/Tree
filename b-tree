B树的定义
一棵B树（B-Tree）是有如下性质的树：

每个节点 x 有下面属相：
a. x.n，节点 x 中的关键字个数；
b. n个关键字 x.key1, x.key2, x.key3, … , x.keyn 以非降序排序，即 x.key1 <= x.key2 <= x.key3 <= … <= x.keyn ;
c. x.leaf，一个布尔值，表示 x 是否为叶结点，是则为True，否则为False。
每个内部节点 x 最多包含 x.n + 1 个孩子（类似一条直线上n个点将直线分成 n+1 段），x.c(i) 为指向其第i个孩子的指针，叶结点没有孩子，所以叶结点的x.c(i)没有定义。
关键字x.key(i) 对存储在各子树中的关键字范围加以分割（同样的，类似直线上的点将直线分段）：如果 k(i) 为 x.c(i) 对应的的子树中的关键字，则：
k1 <= x.key1 <= k2 <= x.key2 <= … <= x.keyn <= k(n+1)
即，对于节点关键字x.key，左边子树的关键字不大于key，右边子树的关键字不小于key。
每个叶结点具有相同的深度，即树的高度h。
每个叶结点包含的关键字个数有上界和下界。用一个被称为B树的最小度数（minmum degree）的固定整数 t >= 2 来表示这个界：
a. 除根节点以外的每个内部节点至少有 t 个孩子，除根节点以外的每个结点至少有 t-1 个关键字。如果树非空，根结点至少有一个关键字。
b. 每个内部结点最多有 2t 个孩子， 最多有 2t-1 个关键字。如果一个节点恰好有 2t-1 个关键字，则称该结点是满的（full）。
B树的高度
B树上大部分操作所需磁盘存取次数与B树的高度成正比。对于B树的高度，有如下定理：
如果 n >= 1，那么对任意一棵包含n个关键字、高度为h、最小度数t >= 2 的B树T，有 在这里插入图片描述
所以，每个结点包含的关键字个数越多，B树的高度越小，从而磁盘存取次数越少。

插入关键字
向一棵与二叉查找树插入新结点一样，需要查找插入新关键字的叶结点的位置。如果待插入的关键字已经存在，则返回该关键字位置 (x, i)，不用再插入。与二叉查找树不同的是，B树的插入不能随便新建叶结点，否则会导致违反B树性质，所以在已有叶结点中插入。但是如果插入叶结点 y 是满的(full)，则需要按其中间关键字y.keyt y.key_ty.key 
t
​	
 将 y 分裂（split）两个各加粗样式含 t-1 个关键字的非满结点（满结点的关键字个数为 2t-1 ），中间关键字y.keyt y.key_ty.key 
t
​	
 被提升到 y 的父结点，以标识两棵新树的划分点。但是如果 y 的父结点也是满的，则其父结点也需要分裂，以此类推，最终满结点的分裂会沿着树向上传播。

上面过程可能需要一下一上两个操作过程：1.自上而下查找插入叶结点位置；2.自下而上分裂满结点。可以对该过程稍作修改，从树根到叶结点这个单程向下过程中将关键字插入B树中。为此，不是等到找出插入过程中实际要分裂的满结点时才做分裂，而是自上而下查找插入位置时，就分裂沿途遇到的每个满结点（包括叶结点），这样，当分裂一个满结点 y 时，可以保证它的父结点不是满的。


//分裂x结点的第i个孩子
B-Tree-Split-Child(x, i)
	y = x.ci
	//分配新节点z
	z = ALLOCATE-NODE()
	z.leaf = y.leaf
	z.n = t - 1
	//使用y后半部分的关键字初始化z的关键字
	for j=1 to (t-1)
		z.key[j] = y.key[j+t]
	y.n = t - 1
	//将x中i后面的所有指向孩子的指针向后移一位
	for j=(x.n + 1) downto (i+1)
		x.c[j+1] = x.c[j]
	//x的第（i+1）个孩子为新结点z
	x.c[i+1] = z
	//将x中i后面的所有关键字向后移一位
	for j=x.n downto i
		x.key[j+1] = x.key[j]
	//将y的中间关键字y.key[t]向上提为父结点x的第i个关键字
	x.key[i] = y.key[t]
	x.n = x.n + 1
	//写磁盘
	DISK-WRITE(x)
	DISK-WRITE(y)
	DISK-WRITE(z)


插入伪代码如下：

//在B树T中插入关键字k
B-Tree-Insert(T, k)
	r = T.root
	//如果根结点r是满的，需要向上新提一个根结点
	if r.n == 2t - 1
		s = ALLOCATE-NODE()
		T.root = s
		s.leaf = False
		s.n = 0
		s.c[1] = r
		B-Tree-Split-Child(s, 1)
		//向以非满结点s为根的树中插入关键字k
		B-Tree-Insert-NonFull(s, k)
	else
		B-Tree-Insert-NonFull(r, k)

//向以非满结点x为根的树中插入关键字k
B-Tree-Insert-NonFull(x, k)
	i = x.n
	//叶结点，直接在该结点插入
	if x.leaf
		while i >= 1 && k < x.key[i]
			x.key[i+1] = x.key[i]
			i = i - 1
		x.key[i+1] = k
		x.n = x.n + 1
		DISK-WRITE(x)
	//内部结点，需要找到插入的叶结点位置
	else
		while i >= 1 && k < x.key[i]
			i = i  - 1
		i = i + 1
		DISK-READ(x.c[i])
		if x.c[i].n == (2t-1)
			B-Tree-Split-Child(x, i)
			if k > x.key[i]
				i = i + 1
		B-Tree-Insert-NonFull(x.c[i], k)

